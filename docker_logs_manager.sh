#!/bin/bash

# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Docker Logs ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Docker Engine 26.1.4 ‡πÅ‡∏•‡∏∞ Docker Compose v2.27.1

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î logs
show_log_sizes() {
    echo "üìä ‡∏Ç‡∏ô‡∏≤‡∏î Docker Logs ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:"
    echo "================================="
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î container logs
    echo "üê≥ Container Logs:"
    sudo du -sh /var/lib/docker/containers/*/
    echo ""
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î application logs
    echo "üìù Application Logs:"
    du -sh ./logs/ 2>/dev/null || echo "‡πÑ‡∏°‡πà‡∏û‡∏ö logs directory"
    echo ""
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏ß‡∏° Docker system
    echo "üíæ Docker System Usage:"
    sudo docker system df
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π logs ‡πÅ‡∏ö‡∏ö real-time
view_logs() {
    local service=$1
    if [ -z "$service" ]; then
        echo "üìã Services ‡∏ó‡∏µ‡πà‡∏°‡∏µ:"
        docker-compose ps --services
        echo ""
        echo "üí° ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: $0 logs <service_name>"
        echo "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: $0 logs app"
        return 1
    fi
    
    echo "üëÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π logs ‡∏Ç‡∏≠‡∏á $service (‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î):"
    docker-compose logs -f --tail=100 "$service"
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î logs
clean_logs() {
    local days=${1:-7}
    
    echo "üßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î logs ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ $days ‡∏ß‡∏±‡∏ô..."
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î application logs
    echo "üìù ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î application logs..."
    find ./logs -type f -name "*.log*" -mtime +$days -exec rm -f {} \; 2>/dev/null
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Docker logs
    echo "üê≥ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Docker system..."
    sudo docker system prune -f --filter "until=${days}h"
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î unused images
    echo "üñºÔ∏è ‡∏•‡∏ö images ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ..."
    sudo docker image prune -f
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î volumes ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ (‡∏£‡∏∞‡∏ß‡∏±‡∏á!)
    echo "üíæ ‡∏•‡∏ö volumes ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ..."
    sudo docker volume prune -f
    
    echo "‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
    echo ""
    show_log_sizes
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á logs
backup_logs() {
    local backup_dir="./logs_backup/$(date +%Y%m%d_%H%M%S)"
    
    echo "üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á logs..."
    mkdir -p "$backup_dir"
    
    # ‡∏™‡∏≥‡∏£‡∏≠‡∏á application logs
    if [ -d "./logs" ]; then
        cp -r ./logs/* "$backup_dir/" 2>/dev/null
        echo "‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á application logs ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    fi
    
    # ‡∏™‡∏≥‡∏£‡∏≠‡∏á container logs (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    echo "üê≥ ‡∏™‡∏≥‡∏£‡∏≠‡∏á container logs..."
    for container in $(docker-compose ps -q); do
        container_name=$(docker inspect --format='{{.Name}}' $container | sed 's/^\/*//')
        docker logs $container > "$backup_dir/${container_name}.log" 2>&1
    done
    
    # ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î backup
    cd ./logs_backup
    tar -czf "$(basename $backup_dir).tar.gz" "$(basename $backup_dir)"
    rm -rf "$(basename $backup_dir)"
    cd - > /dev/null
    
    echo "‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á logs ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ./logs_backup/$(basename $backup_dir).tar.gz"
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ logs
log_stats() {
    echo "üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Docker Logs:"
    echo "===================="
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô log entries ‡πÉ‡∏ô containers
    echo "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô log entries ‡πÉ‡∏ô containers:"
    for container in $(docker-compose ps -q); do
        container_name=$(docker inspect --format='{{.Name}}' $container | sed 's/^\/*//')
        log_count=$(docker logs $container 2>&1 | wc -l)
        echo "  $container_name: $log_count lines"
    done
    echo ""
    
    # ‡πÅ‡∏™‡∏î‡∏á log levels ‡πÉ‡∏ô application logs
    if [ -d "./logs" ]; then
        echo "üìã Log levels ‡πÉ‡∏ô application logs:"
        for log_file in ./logs/*.log; do
            if [ -f "$log_file" ]; then
                echo "  $(basename $log_file):"
                grep -o '\(DEBUG\|INFO\|WARNING\|ERROR\|CRITICAL\)' "$log_file" 2>/dev/null | sort | uniq -c | sort -nr || echo "    ‡πÑ‡∏°‡πà‡∏û‡∏ö log levels"
            fi
        done
    fi
}

# Main script
case "$1" in
    "size"|"sizes")
        show_log_sizes
        ;;
    "logs"|"view")
        view_logs "$2"
        ;;
    "clean")
        clean_logs "$2"
        ;;
    "backup")
        backup_logs
        ;;
    "stats")
        log_stats
        ;;
    *)
        echo "üîß Docker Logs Management Tool"
        echo "=============================="
        echo ""
        echo "üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:"
        echo "  $0 size              - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î logs"
        echo "  $0 logs [service]    - ‡∏î‡∏π logs ‡πÅ‡∏ö‡∏ö real-time"
        echo "  $0 clean [days]      - ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î logs (default: 7 ‡∏ß‡∏±‡∏ô)"
        echo "  $0 backup            - ‡∏™‡∏≥‡∏£‡∏≠‡∏á logs"
        echo "  $0 stats             - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ logs"
        echo ""
        echo "üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:"
        echo "  $0 logs app          - ‡∏î‡∏π logs ‡∏Ç‡∏≠‡∏á app service"
        echo "  $0 clean 30          - ‡∏•‡∏ö logs ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô"
        ;;
esac
